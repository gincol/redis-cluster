apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: redis-cluster
  name: redis-cluster-cluster-create
  namespace: redis
spec:
  activeDeadlineSeconds: 600
  backoffLimit: 6
  completions: 1
  parallelism: 1
#  selector:
#    matchLabels:
#      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
        job-name: redis-cluster-cluster-create
    spec:
      containers:
      - args:
        - |
          # Backwards compatibility change
          if ! [[ -f /opt/bitnami/redis/etc/redis.conf ]]; then
              cp /opt/bitnami/redis/etc/redis-default.conf /opt/bitnami/redis/etc/redis.conf
          fi
          /opt/bitnami/scripts/redis-cluster/entrypoint.sh /opt/bitnami/scripts/redis-cluster/run.sh
        command:
        - /bin/bash
        - -c
        env:
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_NODES
          value: 'redis-cluster-0.redis-cluster-headless.redis.svc.cluster.local redis-cluster-1.redis-cluster-headless.redis.svc.cluster.local
            redis-cluster-2.redis-cluster-headless.redis.svc.cluster.local redis-cluster-3.redis-cluster-headless.redis.svc.cluster.local
            redis-cluster-4.redis-cluster-headless.redis.svc.cluster.local redis-cluster-5.redis-cluster-headless.redis.svc.cluster.local '
        - name: REDIS_CLUSTER_CREATOR
          value: "yes"
        - name: REDIS_CLUSTER_REPLICAS
          value: "1"
        image: docker.io/bitnami/redis-cluster:6.0.9-debian-10-r13
        imagePullPolicy: IfNotPresent
        name: trigger
        securityContext:
          runAsUser: 1000650000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000650000
      # serviceAccount: default
      # serviceAccountName: default
      terminationGracePeriodSeconds: 30
